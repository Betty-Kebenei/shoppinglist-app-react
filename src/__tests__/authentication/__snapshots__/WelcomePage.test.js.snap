// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interface of WelcomePage component should render form 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WelcomePage />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div>
          <h1>
            Welcome to Shopping List Tracker
          </h1>
          <h3>
            Available Features:
          </h3>
          <p>
            Create an account.
          </p>
          <p>
            Create, read, update and delete shopping lists.
          </p>
          <p>
            Create, read, update and delete shopping items in shopping lists.
          </p>
        </div>,
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          disabled={false}
          onClick={[Function]}
        >
          Sign In
        </Button>,
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <ModalHeader
            bsClass="modal-header"
            closeButton={true}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
            >
              Sign In
            </ModalTitle>
          </ModalHeader>
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
          >
            <SignInForm
              email=""
              onChange={[Function]}
              onSubmit={[Function]}
              password=""
              props={Object {}}
            />
          </ModalBody>
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
            >
              Close
            </Button>
          </ModalFooter>
        </Modal>,
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          disabled={false}
          onClick={[Function]}
        >
          Sign Up
        </Button>,
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <ModalHeader
            bsClass="modal-header"
            closeButton={true}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
            >
              Sign Up
            </ModalTitle>
          </ModalHeader>
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
          >
            <SignUpForm
              closeModal={[Function]}
              email=""
              handleChange={[Function]}
              onSubmit={[Function]}
              password=""
              repeat_password=""
              username=""
            />
          </ModalBody>
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
            >
              Close
            </Button>
          </ModalFooter>
        </Modal>,
      ],
      "className": "App",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1>
              Welcome to Shopping List Tracker
            </h1>,
            <h3>
              Available Features:
            </h3>,
            <p>
              Create an account.
            </p>,
            <p>
              Create, read, update and delete shopping lists.
            </p>,
            <p>
              Create, read, update and delete shopping items in shopping lists.
            </p>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Welcome to Shopping List Tracker",
            },
            "ref": null,
            "rendered": "Welcome to Shopping List Tracker",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Available Features:",
            },
            "ref": null,
            "rendered": "Available Features:",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create an account.",
            },
            "ref": null,
            "rendered": "Create an account.",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create, read, update and delete shopping lists.",
            },
            "ref": null,
            "rendered": "Create, read, update and delete shopping lists.",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create, read, update and delete shopping items in shopping lists.",
            },
            "ref": null,
            "rendered": "Create, read, update and delete shopping items in shopping lists.",
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "active": false,
          "block": false,
          "bsClass": "btn",
          "bsStyle": "default",
          "children": "Sign In",
          "disabled": false,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Sign In",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": Array [
            <ModalHeader
              bsClass="modal-header"
              closeButton={true}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign In
              </ModalTitle>
            </ModalHeader>,
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
            >
              <SignInForm
                email=""
                onChange={[Function]}
                onSubmit={[Function]}
                password=""
                props={Object {}}
              />
            </ModalBody>,
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>
            </ModalFooter>,
          ],
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-header",
              "children": <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign In
              </ModalTitle>,
              "closeButton": true,
              "closeLabel": "Close",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-title",
                "children": "Sign In",
                "componentClass": "h4",
              },
              "ref": null,
              "rendered": "Sign In",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-body",
              "children": <SignInForm
                email=""
                onChange={[Function]}
                onSubmit={[Function]}
                password=""
                props={Object {}}
              />,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "email": "",
                "onChange": [Function],
                "onSubmit": [Function],
                "password": "",
                "props": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-footer",
              "children": <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": false,
                "bsClass": "btn",
                "bsStyle": "default",
                "children": "Close",
                "disabled": false,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Close",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "active": false,
          "block": false,
          "bsClass": "btn",
          "bsStyle": "default",
          "children": "Sign Up",
          "disabled": false,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Sign Up",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": Array [
            <ModalHeader
              bsClass="modal-header"
              closeButton={true}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign Up
              </ModalTitle>
            </ModalHeader>,
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
            >
              <SignUpForm
                closeModal={[Function]}
                email=""
                handleChange={[Function]}
                onSubmit={[Function]}
                password=""
                repeat_password=""
                username=""
              />
            </ModalBody>,
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>
            </ModalFooter>,
          ],
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-header",
              "children": <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign Up
              </ModalTitle>,
              "closeButton": true,
              "closeLabel": "Close",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-title",
                "children": "Sign Up",
                "componentClass": "h4",
              },
              "ref": null,
              "rendered": "Sign Up",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-body",
              "children": <SignUpForm
                closeModal={[Function]}
                email=""
                handleChange={[Function]}
                onSubmit={[Function]}
                password=""
                repeat_password=""
                username=""
              />,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "closeModal": [Function],
                "email": "",
                "handleChange": [Function],
                "onSubmit": [Function],
                "password": "",
                "repeat_password": "",
                "username": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-footer",
              "children": <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": false,
                "bsClass": "btn",
                "bsStyle": "default",
                "children": "Close",
                "disabled": false,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Close",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div>
            <h1>
              Welcome to Shopping List Tracker
            </h1>
            <h3>
              Available Features:
            </h3>
            <p>
              Create an account.
            </p>
            <p>
              Create, read, update and delete shopping lists.
            </p>
            <p>
              Create, read, update and delete shopping items in shopping lists.
            </p>
          </div>,
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
            onClick={[Function]}
          >
            Sign In
          </Button>,
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <ModalHeader
              bsClass="modal-header"
              closeButton={true}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign In
              </ModalTitle>
            </ModalHeader>
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
            >
              <SignInForm
                email=""
                onChange={[Function]}
                onSubmit={[Function]}
                password=""
                props={Object {}}
              />
            </ModalBody>
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>
            </ModalFooter>
          </Modal>,
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
            onClick={[Function]}
          >
            Sign Up
          </Button>,
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <ModalHeader
              bsClass="modal-header"
              closeButton={true}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                Sign Up
              </ModalTitle>
            </ModalHeader>
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
            >
              <SignUpForm
                closeModal={[Function]}
                email=""
                handleChange={[Function]}
                onSubmit={[Function]}
                password=""
                repeat_password=""
                username=""
              />
            </ModalBody>
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Close
              </Button>
            </ModalFooter>
          </Modal>,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                Welcome to Shopping List Tracker
              </h1>,
              <h3>
                Available Features:
              </h3>,
              <p>
                Create an account.
              </p>,
              <p>
                Create, read, update and delete shopping lists.
              </p>,
              <p>
                Create, read, update and delete shopping items in shopping lists.
              </p>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Welcome to Shopping List Tracker",
              },
              "ref": null,
              "rendered": "Welcome to Shopping List Tracker",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Available Features:",
              },
              "ref": null,
              "rendered": "Available Features:",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create an account.",
              },
              "ref": null,
              "rendered": "Create an account.",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create, read, update and delete shopping lists.",
              },
              "ref": null,
              "rendered": "Create, read, update and delete shopping lists.",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create, read, update and delete shopping items in shopping lists.",
              },
              "ref": null,
              "rendered": "Create, read, update and delete shopping items in shopping lists.",
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "block": false,
            "bsClass": "btn",
            "bsStyle": "default",
            "children": "Sign In",
            "disabled": false,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Sign In",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "children": Array [
              <ModalHeader
                bsClass="modal-header"
                closeButton={true}
                closeLabel="Close"
              >
                <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
                >
                  Sign In
                </ModalTitle>
              </ModalHeader>,
              <ModalBody
                bsClass="modal-body"
                componentClass="div"
              >
                <SignInForm
                  email=""
                  onChange={[Function]}
                  onSubmit={[Function]}
                  password=""
                  props={Object {}}
                />
              </ModalBody>,
              <ModalFooter
                bsClass="modal-footer"
                componentClass="div"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Close
                </Button>
              </ModalFooter>,
            ],
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-header",
                "children": <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
                >
                  Sign In
                </ModalTitle>,
                "closeButton": true,
                "closeLabel": "Close",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-title",
                  "children": "Sign In",
                  "componentClass": "h4",
                },
                "ref": null,
                "rendered": "Sign In",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-body",
                "children": <SignInForm
                  email=""
                  onChange={[Function]}
                  onSubmit={[Function]}
                  password=""
                  props={Object {}}
                />,
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "email": "",
                  "onChange": [Function],
                  "onSubmit": [Function],
                  "password": "",
                  "props": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-footer",
                "children": <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Close
                </Button>,
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsStyle": "default",
                  "children": "Close",
                  "disabled": false,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Close",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "block": false,
            "bsClass": "btn",
            "bsStyle": "default",
            "children": "Sign Up",
            "disabled": false,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Sign Up",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "children": Array [
              <ModalHeader
                bsClass="modal-header"
                closeButton={true}
                closeLabel="Close"
              >
                <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
                >
                  Sign Up
                </ModalTitle>
              </ModalHeader>,
              <ModalBody
                bsClass="modal-body"
                componentClass="div"
              >
                <SignUpForm
                  closeModal={[Function]}
                  email=""
                  handleChange={[Function]}
                  onSubmit={[Function]}
                  password=""
                  repeat_password=""
                  username=""
                />
              </ModalBody>,
              <ModalFooter
                bsClass="modal-footer"
                componentClass="div"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Close
                </Button>
              </ModalFooter>,
            ],
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-header",
                "children": <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
                >
                  Sign Up
                </ModalTitle>,
                "closeButton": true,
                "closeLabel": "Close",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-title",
                  "children": "Sign Up",
                  "componentClass": "h4",
                },
                "ref": null,
                "rendered": "Sign Up",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-body",
                "children": <SignUpForm
                  closeModal={[Function]}
                  email=""
                  handleChange={[Function]}
                  onSubmit={[Function]}
                  password=""
                  repeat_password=""
                  username=""
                />,
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "closeModal": [Function],
                  "email": "",
                  "handleChange": [Function],
                  "onSubmit": [Function],
                  "password": "",
                  "repeat_password": "",
                  "username": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-footer",
                "children": <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Close
                </Button>,
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsStyle": "default",
                  "children": "Close",
                  "disabled": false,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Close",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
